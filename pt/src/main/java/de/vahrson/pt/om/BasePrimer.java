package de.vahrson.pt.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 17 11:26:19 CET 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Primer
 */
public abstract class BasePrimer extends BaseObject
{
    /** The Peer class */
    private static final PrimerPeer peer =
        new PrimerPeer();

                  
        /**
         * The value for the primer_id field
         */
        private int primer_id;
              
        /**
         * The value for the local_name field
         */
        private String local_name;
              
        /**
         * The value for the sequence field
         */
        private String sequence;
              
        /**
         * The value for the seqlen field
         */
        private int seqlen;
              
        /**
         * The value for the tm field
         */
        private double tm;
              
        /**
         * The value for the gc field
         */
        private double gc;
              
        /**
         * The value for the status field
         */
        private int status;
      
      
        /**
         * Get the PrimerId
         *
         * @return int
         */
        public int getPrimerId()
        {
            return primer_id;
        }

                                                                              
        /**
         * Set the value of PrimerId
         *
         * @param v new value
         */
        public void setPrimerId(int v) throws TorqueException
        {
          


         if (this.primer_id != v)
        {
             this.primer_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated ProjectPrimer
              if (collProjectPrimers != null)
              {
                  for (int i = 0; i < collProjectPrimers.size(); i++)
                  {
                      ((ProjectPrimer) collProjectPrimers.get(i))
                          .setPrimerId(v);
                  }
              }
                                   }


        /**
         * Get the LocalName
         *
         * @return String
         */
        public String getLocalName()
        {
            return local_name;
        }

                                            
        /**
         * Set the value of LocalName
         *
         * @param v new value
         */
        public void setLocalName(String v) 
        {
          


         if (!ObjectUtils.equals(this.local_name, v))
        {
             this.local_name = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Sequence
         *
         * @return String
         */
        public String getSequence()
        {
            return sequence;
        }

                                            
        /**
         * Set the value of Sequence
         *
         * @param v new value
         */
        public void setSequence(String v) 
        {
          


         if (!ObjectUtils.equals(this.sequence, v))
        {
             this.sequence = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Seqlen
         *
         * @return int
         */
        public int getSeqlen()
        {
            return seqlen;
        }

                                            
        /**
         * Set the value of Seqlen
         *
         * @param v new value
         */
        public void setSeqlen(int v) 
        {
          


         if (this.seqlen != v)
        {
             this.seqlen = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Tm
         *
         * @return double
         */
        public double getTm()
        {
            return tm;
        }

                                            
        /**
         * Set the value of Tm
         *
         * @param v new value
         */
        public void setTm(double v) 
        {
          


         if (this.tm != v)
        {
             this.tm = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Gc
         *
         * @return double
         */
        public double getGc()
        {
            return gc;
        }

                                            
        /**
         * Set the value of Gc
         *
         * @param v new value
         */
        public void setGc(double v) 
        {
          


         if (this.gc != v)
        {
             this.gc = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collProjectPrimers
     */
    protected List collProjectPrimers;

    /**
     * Temporary storage of collProjectPrimers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectPrimers()
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectPrimer object to this object
     * through the ProjectPrimer foreign key attribute
     *
     * @param l ProjectPrimer
     * @throws TorqueException
     */
    public void addProjectPrimer(ProjectPrimer l) throws TorqueException
    {
        getProjectPrimers().add(l);
        l.setPrimer((Primer) this);
    }

    /**
     * The criteria used to select the current contents of collProjectPrimers
     */
    private Criteria lastProjectPrimersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPrimers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectPrimers() throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = getProjectPrimers(new Criteria(10));
        }
        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Primer has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     * If this Primer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectPrimers(Criteria criteria) throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId() );
                   collProjectPrimers = ProjectPrimerPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
                   if (!lastProjectPrimersCriteria.equals(criteria))
                {
                    collProjectPrimers = ProjectPrimerPeer.doSelect(criteria);
                }
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPrimers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPrimers(Connection con) throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = getProjectPrimers(new Criteria(10), con);
        }
        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Primer has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     * If this Primer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPrimers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
                     collProjectPrimers = ProjectPrimerPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
                     if (!lastProjectPrimersCriteria.equals(criteria))
                 {
                     collProjectPrimers = ProjectPrimerPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectPrimersCriteria = criteria;

         return collProjectPrimers;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Primer is new, it will return
     * an empty collection; or if this Primer has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Primer.
     */
    protected List getProjectPrimersJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
                   collProjectPrimers = ProjectPrimerPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
               if (!lastProjectPrimersCriteria.equals(criteria))
            {
                collProjectPrimers = ProjectPrimerPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Primer is new, it will return
     * an empty collection; or if this Primer has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Primer.
     */
    protected List getProjectPrimersJoinPrimer(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
                   collProjectPrimers = ProjectPrimerPeer.doSelectJoinPrimer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPrimerPeer.PRIMER_ID, getPrimerId());
               if (!lastProjectPrimersCriteria.equals(criteria))
            {
                collProjectPrimers = ProjectPrimerPeer.doSelectJoinPrimer(criteria);
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("PrimerId");
            fieldNames.add("LocalName");
            fieldNames.add("Sequence");
            fieldNames.add("Seqlen");
            fieldNames.add("Tm");
            fieldNames.add("Gc");
            fieldNames.add("Status");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("PrimerId"))
    {
              return new Integer(getPrimerId());
          }
            if (name.equals("LocalName"))
    {
              return getLocalName();
          }
            if (name.equals("Sequence"))
    {
              return getSequence();
          }
            if (name.equals("Seqlen"))
    {
              return new Integer(getSeqlen());
          }
            if (name.equals("Tm"))
    {
              return new Double(getTm());
          }
            if (name.equals("Gc"))
    {
              return new Double(getGc());
          }
            if (name.equals("Status"))
    {
              return new Integer(getStatus());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(PrimerPeer.PRIMER_ID))
        {
              return new Integer(getPrimerId());
          }
            if (name.equals(PrimerPeer.LOCAL_NAME))
        {
              return getLocalName();
          }
            if (name.equals(PrimerPeer.SEQUENCE))
        {
              return getSequence();
          }
            if (name.equals(PrimerPeer.SEQLEN))
        {
              return new Integer(getSeqlen());
          }
            if (name.equals(PrimerPeer.TM))
        {
              return new Double(getTm());
          }
            if (name.equals(PrimerPeer.GC))
        {
              return new Double(getGc());
          }
            if (name.equals(PrimerPeer.STATUS))
        {
              return new Integer(getStatus());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getPrimerId());
          }
            if (pos == 1)
    {
              return getLocalName();
          }
            if (pos == 2)
    {
              return getSequence();
          }
            if (pos == 3)
    {
              return new Integer(getSeqlen());
          }
            if (pos == 4)
    {
              return new Double(getTm());
          }
            if (pos == 5)
    {
              return new Double(getGc());
          }
            if (pos == 6)
    {
              return new Integer(getStatus());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(PrimerPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                PrimerPeer.doInsert((Primer) this, con);
                setNew(false);
            }
            else
            {
                PrimerPeer.doUpdate((Primer) this, con);
            }
        }

                                    
                
          if (collProjectPrimers != null)
          {
              for (int i = 0; i < collProjectPrimers.size(); i++)
              {
                  ((ProjectPrimer) collProjectPrimers.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  primer_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setPrimerId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setPrimerId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getPrimerId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Primer copy() throws TorqueException
    {
        return copyInto(new Primer());
    }

    protected Primer copyInto(Primer copyObj) throws TorqueException
    {
        copyObj.setPrimerId(primer_id);
        copyObj.setLocalName(local_name);
        copyObj.setSequence(sequence);
        copyObj.setSeqlen(seqlen);
        copyObj.setTm(tm);
        copyObj.setGc(gc);
        copyObj.setStatus(status);

                      copyObj.setPrimerId(0);
                                    

                                  
                
        List v = getProjectPrimers();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectPrimer obj = (ProjectPrimer) v.get(i);
            copyObj.addProjectPrimer(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public PrimerPeer getPeer()
    {
        return peer;
    }
}

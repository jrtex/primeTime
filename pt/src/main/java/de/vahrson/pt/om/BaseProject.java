package de.vahrson.pt.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 17 11:26:19 CET 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Project
 */
public abstract class BaseProject extends BaseObject
{
    /** The Peer class */
    private static final ProjectPeer peer =
        new ProjectPeer();

                  
        /**
         * The value for the project_id field
         */
        private int project_id;
              
        /**
         * The value for the name field
         */
        private String name;
              
        /**
         * The value for the shortname field
         */
        private String shortname;
              
        /**
         * The value for the directory_path field
         */
        private String directory_path;
              
        /**
         * The value for the parent_id field
         */
        private int parent_id;
      
      
        /**
         * Get the ProjectId
         *
         * @return int
         */
        public int getProjectId()
        {
            return project_id;
        }

                                                                              
        /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
        public void setProjectId(int v) throws TorqueException
        {
          


         if (this.project_id != v)
        {
             this.project_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated Parameter
              if (collParameters != null)
              {
                  for (int i = 0; i < collParameters.size(); i++)
                  {
                      ((Parameter) collParameters.get(i))
                          .setProjectId(v);
                  }
              }
                                                                                    
              // update associated ProjectHit
              if (collProjectHits != null)
              {
                  for (int i = 0; i < collProjectHits.size(); i++)
                  {
                      ((ProjectHit) collProjectHits.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated ProjectOrf
              if (collProjectOrfs != null)
              {
                  for (int i = 0; i < collProjectOrfs.size(); i++)
                  {
                      ((ProjectOrf) collProjectOrfs.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated ProjectPrimer
              if (collProjectPrimers != null)
              {
                  for (int i = 0; i < collProjectPrimers.size(); i++)
                  {
                      ((ProjectPrimer) collProjectPrimers.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated ProjectPcrProduct
              if (collProjectPcrProducts != null)
              {
                  for (int i = 0; i < collProjectPcrProducts.size(); i++)
                  {
                      ((ProjectPcrProduct) collProjectPcrProducts.get(i))
                          .setProjectId(v);
                  }
              }
                                   }


        /**
         * Get the Name
         *
         * @return String
         */
        public String getName()
        {
            return name;
        }

                                            
        /**
         * Set the value of Name
         *
         * @param v new value
         */
        public void setName(String v) 
        {
          


         if (!ObjectUtils.equals(this.name, v))
        {
             this.name = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Shortname
         *
         * @return String
         */
        public String getShortname()
        {
            return shortname;
        }

                                            
        /**
         * Set the value of Shortname
         *
         * @param v new value
         */
        public void setShortname(String v) 
        {
          


         if (!ObjectUtils.equals(this.shortname, v))
        {
             this.shortname = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DirectoryPath
         *
         * @return String
         */
        public String getDirectoryPath()
        {
            return directory_path;
        }

                                            
        /**
         * Set the value of DirectoryPath
         *
         * @param v new value
         */
        public void setDirectoryPath(String v) 
        {
          


         if (!ObjectUtils.equals(this.directory_path, v))
        {
             this.directory_path = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ParentId
         *
         * @return int
         */
        public int getParentId()
        {
            return parent_id;
        }

                                                      
        /**
         * Set the value of ParentId
         *
         * @param v new value
         */
        public void setParentId(int v) throws TorqueException
        {
          


         if (this.parent_id != v)
        {
             this.parent_id = v;
            setModified(true);
        }

                                                                                                                
                if (aProjectRelatedByParentId != null && !(aProjectRelatedByParentId.getProjectId()==v))
                {
            aProjectRelatedByParentId = null;
        }
          
                       }


 
     
   
                 
      
       private Project aProjectRelatedByParentId;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProjectRelatedByParentId(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setParentId(0);
                    }
        else
        {
            setParentId(v.getProjectId());
        }
           aProjectRelatedByParentId = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProjectRelatedByParentId() throws TorqueException
    {
        if (aProjectRelatedByParentId == null && (this.parent_id > 0))
        {
              aProjectRelatedByParentId = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.parent_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.parent_id);
               obj.addProjectsRelatedByParentId(this);
             */
        }
        return aProjectRelatedByParentId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectRelatedByParentIdKey(ObjectKey key) throws TorqueException
    {
    
                                        setParentId(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collParameters
     */
    protected List collParameters;

    /**
     * Temporary storage of collParameters to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initParameters()
    {
        if (collParameters == null)
        {
            collParameters = new ArrayList();
        }
    }

    /**
     * Method called to associate a Parameter object to this object
     * through the Parameter foreign key attribute
     *
     * @param l Parameter
     * @throws TorqueException
     */
    public void addParameter(Parameter l) throws TorqueException
    {
        getParameters().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collParameters
     */
    private Criteria lastParametersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getParameters(new Criteria())
     *
     * @throws TorqueException
     */
    public List getParameters() throws TorqueException
    {
        if (collParameters == null)
        {
            collParameters = getParameters(new Criteria(10));
        }
        return collParameters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Parameters from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getParameters(Criteria criteria) throws TorqueException
    {
        if (collParameters == null)
        {
            if (isNew())
            {
               collParameters = new ArrayList();
            }
            else
            {
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId() );
                   collParameters = ParameterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
                   if (!lastParametersCriteria.equals(criteria))
                {
                    collParameters = ParameterPeer.doSelect(criteria);
                }
            }
        }
        lastParametersCriteria = criteria;

        return collParameters;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getParameters(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getParameters(Connection con) throws TorqueException
    {
        if (collParameters == null)
        {
            collParameters = getParameters(new Criteria(10), con);
        }
        return collParameters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Parameters from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getParameters(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collParameters == null)
        {
            if (isNew())
            {
               collParameters = new ArrayList();
            }
            else
            {
                     criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
                     collParameters = ParameterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
                     if (!lastParametersCriteria.equals(criteria))
                 {
                     collParameters = ParameterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastParametersCriteria = criteria;

         return collParameters;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Parameters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getParametersJoinParameterDescription(Criteria criteria)
        throws TorqueException
    {
        if (collParameters == null)
        {
            if (isNew())
            {
               collParameters = new ArrayList();
            }
            else
            {
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
                   collParameters = ParameterPeer.doSelectJoinParameterDescription(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
               if (!lastParametersCriteria.equals(criteria))
            {
                collParameters = ParameterPeer.doSelectJoinParameterDescription(criteria);
            }
        }
        lastParametersCriteria = criteria;

        return collParameters;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Parameters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getParametersJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collParameters == null)
        {
            if (isNew())
            {
               collParameters = new ArrayList();
            }
            else
            {
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
                   collParameters = ParameterPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ParameterPeer.PROJECT_ID, getProjectId());
               if (!lastParametersCriteria.equals(criteria))
            {
                collParameters = ParameterPeer.doSelectJoinProject(criteria);
            }
        }
        lastParametersCriteria = criteria;

        return collParameters;
    }
     



   



             
      
    /**
     * Collection to store aggregation of collProjectHits
     */
    protected List collProjectHits;

    /**
     * Temporary storage of collProjectHits to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectHits()
    {
        if (collProjectHits == null)
        {
            collProjectHits = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectHit object to this object
     * through the ProjectHit foreign key attribute
     *
     * @param l ProjectHit
     * @throws TorqueException
     */
    public void addProjectHit(ProjectHit l) throws TorqueException
    {
        getProjectHits().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collProjectHits
     */
    private Criteria lastProjectHitsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectHits(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectHits() throws TorqueException
    {
        if (collProjectHits == null)
        {
            collProjectHits = getProjectHits(new Criteria(10));
        }
        return collProjectHits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectHits from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectHits(Criteria criteria) throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId() );
                   collProjectHits = ProjectHitPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
                   if (!lastProjectHitsCriteria.equals(criteria))
                {
                    collProjectHits = ProjectHitPeer.doSelect(criteria);
                }
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectHits(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectHits(Connection con) throws TorqueException
    {
        if (collProjectHits == null)
        {
            collProjectHits = getProjectHits(new Criteria(10), con);
        }
        return collProjectHits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectHits from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectHits(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
                     collProjectHits = ProjectHitPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
                     if (!lastProjectHitsCriteria.equals(criteria))
                 {
                     collProjectHits = ProjectHitPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectHitsCriteria = criteria;

         return collProjectHits;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectHits from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectHitsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
                   collProjectHits = ProjectHitPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
               if (!lastProjectHitsCriteria.equals(criteria))
            {
                collProjectHits = ProjectHitPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectHits from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectHitsJoinHit(Criteria criteria)
        throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
                   collProjectHits = ProjectHitPeer.doSelectJoinHit(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectHitPeer.PROJECT_ID, getProjectId());
               if (!lastProjectHitsCriteria.equals(criteria))
            {
                collProjectHits = ProjectHitPeer.doSelectJoinHit(criteria);
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }
     



             
      
    /**
     * Collection to store aggregation of collProjectOrfs
     */
    protected List collProjectOrfs;

    /**
     * Temporary storage of collProjectOrfs to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectOrfs()
    {
        if (collProjectOrfs == null)
        {
            collProjectOrfs = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectOrf object to this object
     * through the ProjectOrf foreign key attribute
     *
     * @param l ProjectOrf
     * @throws TorqueException
     */
    public void addProjectOrf(ProjectOrf l) throws TorqueException
    {
        getProjectOrfs().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collProjectOrfs
     */
    private Criteria lastProjectOrfsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectOrfs(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectOrfs() throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            collProjectOrfs = getProjectOrfs(new Criteria(10));
        }
        return collProjectOrfs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectOrfs from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectOrfs(Criteria criteria) throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            if (isNew())
            {
               collProjectOrfs = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId() );
                   collProjectOrfs = ProjectOrfPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
                   if (!lastProjectOrfsCriteria.equals(criteria))
                {
                    collProjectOrfs = ProjectOrfPeer.doSelect(criteria);
                }
            }
        }
        lastProjectOrfsCriteria = criteria;

        return collProjectOrfs;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectOrfs(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectOrfs(Connection con) throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            collProjectOrfs = getProjectOrfs(new Criteria(10), con);
        }
        return collProjectOrfs;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectOrfs from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectOrfs(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            if (isNew())
            {
               collProjectOrfs = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
                     collProjectOrfs = ProjectOrfPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
                     if (!lastProjectOrfsCriteria.equals(criteria))
                 {
                     collProjectOrfs = ProjectOrfPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectOrfsCriteria = criteria;

         return collProjectOrfs;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectOrfs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectOrfsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            if (isNew())
            {
               collProjectOrfs = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
                   collProjectOrfs = ProjectOrfPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
               if (!lastProjectOrfsCriteria.equals(criteria))
            {
                collProjectOrfs = ProjectOrfPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectOrfsCriteria = criteria;

        return collProjectOrfs;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectOrfs from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectOrfsJoinOrf(Criteria criteria)
        throws TorqueException
    {
        if (collProjectOrfs == null)
        {
            if (isNew())
            {
               collProjectOrfs = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
                   collProjectOrfs = ProjectOrfPeer.doSelectJoinOrf(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectOrfPeer.PROJECT_ID, getProjectId());
               if (!lastProjectOrfsCriteria.equals(criteria))
            {
                collProjectOrfs = ProjectOrfPeer.doSelectJoinOrf(criteria);
            }
        }
        lastProjectOrfsCriteria = criteria;

        return collProjectOrfs;
    }
     



             
      
    /**
     * Collection to store aggregation of collProjectPrimers
     */
    protected List collProjectPrimers;

    /**
     * Temporary storage of collProjectPrimers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectPrimers()
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectPrimer object to this object
     * through the ProjectPrimer foreign key attribute
     *
     * @param l ProjectPrimer
     * @throws TorqueException
     */
    public void addProjectPrimer(ProjectPrimer l) throws TorqueException
    {
        getProjectPrimers().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collProjectPrimers
     */
    private Criteria lastProjectPrimersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPrimers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectPrimers() throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = getProjectPrimers(new Criteria(10));
        }
        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectPrimers(Criteria criteria) throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId() );
                   collProjectPrimers = ProjectPrimerPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
                   if (!lastProjectPrimersCriteria.equals(criteria))
                {
                    collProjectPrimers = ProjectPrimerPeer.doSelect(criteria);
                }
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPrimers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPrimers(Connection con) throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            collProjectPrimers = getProjectPrimers(new Criteria(10), con);
        }
        return collProjectPrimers;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPrimers(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
                     collProjectPrimers = ProjectPrimerPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
                     if (!lastProjectPrimersCriteria.equals(criteria))
                 {
                     collProjectPrimers = ProjectPrimerPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectPrimersCriteria = criteria;

         return collProjectPrimers;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectPrimersJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
                   collProjectPrimers = ProjectPrimerPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
               if (!lastProjectPrimersCriteria.equals(criteria))
            {
                collProjectPrimers = ProjectPrimerPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectPrimers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectPrimersJoinPrimer(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPrimers == null)
        {
            if (isNew())
            {
               collProjectPrimers = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
                   collProjectPrimers = ProjectPrimerPeer.doSelectJoinPrimer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPrimerPeer.PROJECT_ID, getProjectId());
               if (!lastProjectPrimersCriteria.equals(criteria))
            {
                collProjectPrimers = ProjectPrimerPeer.doSelectJoinPrimer(criteria);
            }
        }
        lastProjectPrimersCriteria = criteria;

        return collProjectPrimers;
    }
     



             
      
    /**
     * Collection to store aggregation of collProjectPcrProducts
     */
    protected List collProjectPcrProducts;

    /**
     * Temporary storage of collProjectPcrProducts to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectPcrProducts()
    {
        if (collProjectPcrProducts == null)
        {
            collProjectPcrProducts = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectPcrProduct object to this object
     * through the ProjectPcrProduct foreign key attribute
     *
     * @param l ProjectPcrProduct
     * @throws TorqueException
     */
    public void addProjectPcrProduct(ProjectPcrProduct l) throws TorqueException
    {
        getProjectPcrProducts().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collProjectPcrProducts
     */
    private Criteria lastProjectPcrProductsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPcrProducts(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectPcrProducts() throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            collProjectPcrProducts = getProjectPcrProducts(new Criteria(10));
        }
        return collProjectPcrProducts;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectPcrProducts from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectPcrProducts(Criteria criteria) throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            if (isNew())
            {
               collProjectPcrProducts = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId() );
                   collProjectPcrProducts = ProjectPcrProductPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
                   if (!lastProjectPcrProductsCriteria.equals(criteria))
                {
                    collProjectPcrProducts = ProjectPcrProductPeer.doSelect(criteria);
                }
            }
        }
        lastProjectPcrProductsCriteria = criteria;

        return collProjectPcrProducts;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectPcrProducts(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPcrProducts(Connection con) throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            collProjectPcrProducts = getProjectPcrProducts(new Criteria(10), con);
        }
        return collProjectPcrProducts;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ProjectPcrProducts from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectPcrProducts(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            if (isNew())
            {
               collProjectPcrProducts = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
                     collProjectPcrProducts = ProjectPcrProductPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
                     if (!lastProjectPcrProductsCriteria.equals(criteria))
                 {
                     collProjectPcrProducts = ProjectPcrProductPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectPcrProductsCriteria = criteria;

         return collProjectPcrProducts;
     }

    

     
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectPcrProducts from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectPcrProductsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            if (isNew())
            {
               collProjectPcrProducts = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
                   collProjectPcrProducts = ProjectPcrProductPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
               if (!lastProjectPcrProductsCriteria.equals(criteria))
            {
                collProjectPcrProducts = ProjectPcrProductPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectPcrProductsCriteria = criteria;

        return collProjectPcrProducts;
    }
   
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ProjectPcrProducts from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getProjectPcrProductsJoinPcrProduct(Criteria criteria)
        throws TorqueException
    {
        if (collProjectPcrProducts == null)
        {
            if (isNew())
            {
               collProjectPcrProducts = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
                   collProjectPcrProducts = ProjectPcrProductPeer.doSelectJoinPcrProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectPcrProductPeer.PROJECT_ID, getProjectId());
               if (!lastProjectPcrProductsCriteria.equals(criteria))
            {
                collProjectPcrProducts = ProjectPcrProductPeer.doSelectJoinPcrProduct(criteria);
            }
        }
        lastProjectPcrProductsCriteria = criteria;

        return collProjectPcrProducts;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("ProjectId");
            fieldNames.add("Name");
            fieldNames.add("Shortname");
            fieldNames.add("DirectoryPath");
            fieldNames.add("ParentId");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("ProjectId"))
    {
              return new Integer(getProjectId());
          }
            if (name.equals("Name"))
    {
              return getName();
          }
            if (name.equals("Shortname"))
    {
              return getShortname();
          }
            if (name.equals("DirectoryPath"))
    {
              return getDirectoryPath();
          }
            if (name.equals("ParentId"))
    {
              return new Integer(getParentId());
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(ProjectPeer.PROJECT_ID))
        {
              return new Integer(getProjectId());
          }
            if (name.equals(ProjectPeer.NAME))
        {
              return getName();
          }
            if (name.equals(ProjectPeer.SHORTNAME))
        {
              return getShortname();
          }
            if (name.equals(ProjectPeer.DIRECTORY_PATH))
        {
              return getDirectoryPath();
          }
            if (name.equals(ProjectPeer.PARENT_ID))
        {
              return new Integer(getParentId());
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getProjectId());
          }
            if (pos == 1)
    {
              return getName();
          }
            if (pos == 2)
    {
              return getShortname();
          }
            if (pos == 3)
    {
              return getDirectoryPath();
          }
            if (pos == 4)
    {
              return new Integer(getParentId());
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(ProjectPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                ProjectPeer.doInsert((Project) this, con);
                setNew(false);
            }
            else
            {
                ProjectPeer.doUpdate((Project) this, con);
            }
        }

                                    
                
          if (collParameters != null)
          {
              for (int i = 0; i < collParameters.size(); i++)
              {
                  ((Parameter) collParameters.get(i)).save(con);
              }
          }
                                               
                
          if (collProjectHits != null)
          {
              for (int i = 0; i < collProjectHits.size(); i++)
              {
                  ((ProjectHit) collProjectHits.get(i)).save(con);
              }
          }
                                        
                
          if (collProjectOrfs != null)
          {
              for (int i = 0; i < collProjectOrfs.size(); i++)
              {
                  ((ProjectOrf) collProjectOrfs.get(i)).save(con);
              }
          }
                                        
                
          if (collProjectPrimers != null)
          {
              for (int i = 0; i < collProjectPrimers.size(); i++)
              {
                  ((ProjectPrimer) collProjectPrimers.get(i)).save(con);
              }
          }
                                        
                
          if (collProjectPcrProducts != null)
          {
              for (int i = 0; i < collProjectPcrProducts.size(); i++)
              {
                  ((ProjectPcrProduct) collProjectPcrProducts.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  project_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setProjectId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setProjectId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getProjectId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Project copy() throws TorqueException
    {
        return copyInto(new Project());
    }

    protected Project copyInto(Project copyObj) throws TorqueException
    {
        copyObj.setProjectId(project_id);
        copyObj.setName(name);
        copyObj.setShortname(shortname);
        copyObj.setDirectoryPath(directory_path);
        copyObj.setParentId(parent_id);

                      copyObj.setProjectId(0);
                            

                                  
                
        List v = getParameters();
        for (int i = 0; i < v.size(); i++)
        {
            Parameter obj = (Parameter) v.get(i);
            copyObj.addParameter(obj.copy());
        }
                                                    
                
        v = getProjectHits();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectHit obj = (ProjectHit) v.get(i);
            copyObj.addProjectHit(obj.copy());
        }
                                              
                
        v = getProjectOrfs();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectOrf obj = (ProjectOrf) v.get(i);
            copyObj.addProjectOrf(obj.copy());
        }
                                              
                
        v = getProjectPrimers();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectPrimer obj = (ProjectPrimer) v.get(i);
            copyObj.addProjectPrimer(obj.copy());
        }
                                              
                
        v = getProjectPcrProducts();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectPcrProduct obj = (ProjectPcrProduct) v.get(i);
            copyObj.addProjectPcrProduct(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProjectPeer getPeer()
    {
        return peer;
    }
}

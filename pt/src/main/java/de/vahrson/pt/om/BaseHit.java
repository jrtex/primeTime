package de.vahrson.pt.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Mar 17 11:26:19 CET 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Hit
 */
public abstract class BaseHit extends BaseObject
{
    /** The Peer class */
    private static final HitPeer peer =
        new HitPeer();

                  
        /**
         * The value for the hit_id field
         */
        private int hit_id;
              
        /**
         * The value for the primer_id field
         */
        private int primer_id;
              
        /**
         * The value for the usa field
         */
        private String usa;
              
        /**
         * The value for the position field
         */
        private int position;
              
        /**
         * The value for the length field
         */
        private int length;
              
        /**
         * The value for the strand field
         */
        private boolean strand;
              
        /**
         * The value for the mismatches field
         */
        private int mismatches;
              
        /**
         * The value for the creator field
         */
        private String creator;
      
      
        /**
         * Get the HitId
         *
         * @return int
         */
        public int getHitId()
        {
            return hit_id;
        }

                                                                              
        /**
         * Set the value of HitId
         *
         * @param v new value
         */
        public void setHitId(int v) throws TorqueException
        {
          


         if (this.hit_id != v)
        {
             this.hit_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated PcrProduct
              if (collPcrProductsRelatedByLeftHitId != null)
              {
                  for (int i = 0; i < collPcrProductsRelatedByLeftHitId.size(); i++)
                  {
                      ((PcrProduct) collPcrProductsRelatedByLeftHitId.get(i))
                          .setLeftHitId(v);
                  }
              }
                                                              
              // update associated PcrProduct
              if (collPcrProductsRelatedByRightHitId != null)
              {
                  for (int i = 0; i < collPcrProductsRelatedByRightHitId.size(); i++)
                  {
                      ((PcrProduct) collPcrProductsRelatedByRightHitId.get(i))
                          .setRightHitId(v);
                  }
              }
                                                              
              // update associated ProjectHit
              if (collProjectHits != null)
              {
                  for (int i = 0; i < collProjectHits.size(); i++)
                  {
                      ((ProjectHit) collProjectHits.get(i))
                          .setHitId(v);
                  }
              }
                                   }


        /**
         * Get the PrimerId
         *
         * @return int
         */
        public int getPrimerId()
        {
            return primer_id;
        }

                                            
        /**
         * Set the value of PrimerId
         *
         * @param v new value
         */
        public void setPrimerId(int v) 
        {
          


         if (this.primer_id != v)
        {
             this.primer_id = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Usa
         *
         * @return String
         */
        public String getUsa()
        {
            return usa;
        }

                                            
        /**
         * Set the value of Usa
         *
         * @param v new value
         */
        public void setUsa(String v) 
        {
          


         if (!ObjectUtils.equals(this.usa, v))
        {
             this.usa = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Position
         *
         * @return int
         */
        public int getPosition()
        {
            return position;
        }

                                            
        /**
         * Set the value of Position
         *
         * @param v new value
         */
        public void setPosition(int v) 
        {
          


         if (this.position != v)
        {
             this.position = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Length
         *
         * @return int
         */
        public int getLength()
        {
            return length;
        }

                                            
        /**
         * Set the value of Length
         *
         * @param v new value
         */
        public void setLength(int v) 
        {
          


         if (this.length != v)
        {
             this.length = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Strand
         *
         * @return boolean
         */
        public boolean getStrand()
        {
            return strand;
        }

                                            
        /**
         * Set the value of Strand
         *
         * @param v new value
         */
        public void setStrand(boolean v) 
        {
          


         if (this.strand != v)
        {
             this.strand = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Mismatches
         *
         * @return int
         */
        public int getMismatches()
        {
            return mismatches;
        }

                                            
        /**
         * Set the value of Mismatches
         *
         * @param v new value
         */
        public void setMismatches(int v) 
        {
          


         if (this.mismatches != v)
        {
             this.mismatches = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Creator
         *
         * @return String
         */
        public String getCreator()
        {
            return creator;
        }

                                            
        /**
         * Set the value of Creator
         *
         * @param v new value
         */
        public void setCreator(String v) 
        {
          


         if (!ObjectUtils.equals(this.creator, v))
        {
             this.creator = v;
            setModified(true);
        }

                  
                       }


 
        
                    
      
    /**
     * Collection to store aggregation of collPcrProductsRelatedByLeftHitId
     */
    protected List collPcrProductsRelatedByLeftHitId;

    /**
     * Temporary storage of collPcrProductsRelatedByLeftHitId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPcrProductsRelatedByLeftHitId()
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            collPcrProductsRelatedByLeftHitId = new ArrayList();
        }
    }

    /**
     * Method called to associate a PcrProduct object to this object
     * through the PcrProduct foreign key attribute
     *
     * @param l PcrProduct
     * @throws TorqueException
     */
    public void addPcrProductRelatedByLeftHitId(PcrProduct l) throws TorqueException
    {
        getPcrProductsRelatedByLeftHitId().add(l);
        l.setHitRelatedByLeftHitId((Hit) this);
    }

    /**
     * The criteria used to select the current contents of collPcrProductsRelatedByLeftHitId
     */
    private Criteria lastPcrProductsRelatedByLeftHitIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPcrProductsRelatedByLeftHitId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPcrProductsRelatedByLeftHitId() throws TorqueException
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            collPcrProductsRelatedByLeftHitId = getPcrProductsRelatedByLeftHitId(new Criteria(10));
        }
        return collPcrProductsRelatedByLeftHitId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByLeftHitId from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPcrProductsRelatedByLeftHitId(Criteria criteria) throws TorqueException
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByLeftHitId = new ArrayList();
            }
            else
            {
                   criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId() );
                   collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId());
                   if (!lastPcrProductsRelatedByLeftHitIdCriteria.equals(criteria))
                {
                    collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelect(criteria);
                }
            }
        }
        lastPcrProductsRelatedByLeftHitIdCriteria = criteria;

        return collPcrProductsRelatedByLeftHitId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPcrProductsRelatedByLeftHitId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPcrProductsRelatedByLeftHitId(Connection con) throws TorqueException
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            collPcrProductsRelatedByLeftHitId = getPcrProductsRelatedByLeftHitId(new Criteria(10), con);
        }
        return collPcrProductsRelatedByLeftHitId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByLeftHitId from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPcrProductsRelatedByLeftHitId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByLeftHitId = new ArrayList();
            }
            else
            {
                     criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId());
                     collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId());
                     if (!lastPcrProductsRelatedByLeftHitIdCriteria.equals(criteria))
                 {
                     collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPcrProductsRelatedByLeftHitIdCriteria = criteria;

         return collPcrProductsRelatedByLeftHitId;
     }

    

     
      
         
              
                                    
                
        
                        
    
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit is new, it will return
     * an empty collection; or if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByLeftHitId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Hit.
     */
    protected List getPcrProductsRelatedByLeftHitIdJoinHitRelatedByRightHitId(Criteria criteria)
        throws TorqueException
    {
        if (collPcrProductsRelatedByLeftHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByLeftHitId = new ArrayList();
            }
            else
            {
                   criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId());
                   collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelectJoinHitRelatedByRightHitId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PcrProductPeer.LEFT_HIT_ID, getHitId());
               if (!lastPcrProductsRelatedByLeftHitIdCriteria.equals(criteria))
            {
                collPcrProductsRelatedByLeftHitId = PcrProductPeer.doSelectJoinHitRelatedByRightHitId(criteria);
            }
        }
        lastPcrProductsRelatedByLeftHitIdCriteria = criteria;

        return collPcrProductsRelatedByLeftHitId;
    }
     



                 
      
    /**
     * Collection to store aggregation of collPcrProductsRelatedByRightHitId
     */
    protected List collPcrProductsRelatedByRightHitId;

    /**
     * Temporary storage of collPcrProductsRelatedByRightHitId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPcrProductsRelatedByRightHitId()
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            collPcrProductsRelatedByRightHitId = new ArrayList();
        }
    }

    /**
     * Method called to associate a PcrProduct object to this object
     * through the PcrProduct foreign key attribute
     *
     * @param l PcrProduct
     * @throws TorqueException
     */
    public void addPcrProductRelatedByRightHitId(PcrProduct l) throws TorqueException
    {
        getPcrProductsRelatedByRightHitId().add(l);
        l.setHitRelatedByRightHitId((Hit) this);
    }

    /**
     * The criteria used to select the current contents of collPcrProductsRelatedByRightHitId
     */
    private Criteria lastPcrProductsRelatedByRightHitIdCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPcrProductsRelatedByRightHitId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPcrProductsRelatedByRightHitId() throws TorqueException
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            collPcrProductsRelatedByRightHitId = getPcrProductsRelatedByRightHitId(new Criteria(10));
        }
        return collPcrProductsRelatedByRightHitId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByRightHitId from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPcrProductsRelatedByRightHitId(Criteria criteria) throws TorqueException
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByRightHitId = new ArrayList();
            }
            else
            {
                   criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId() );
                   collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId());
                   if (!lastPcrProductsRelatedByRightHitIdCriteria.equals(criteria))
                {
                    collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelect(criteria);
                }
            }
        }
        lastPcrProductsRelatedByRightHitIdCriteria = criteria;

        return collPcrProductsRelatedByRightHitId;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPcrProductsRelatedByRightHitId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPcrProductsRelatedByRightHitId(Connection con) throws TorqueException
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            collPcrProductsRelatedByRightHitId = getPcrProductsRelatedByRightHitId(new Criteria(10), con);
        }
        return collPcrProductsRelatedByRightHitId;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByRightHitId from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPcrProductsRelatedByRightHitId(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByRightHitId = new ArrayList();
            }
            else
            {
                     criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId());
                     collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId());
                     if (!lastPcrProductsRelatedByRightHitIdCriteria.equals(criteria))
                 {
                     collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPcrProductsRelatedByRightHitIdCriteria = criteria;

         return collPcrProductsRelatedByRightHitId;
     }

    

     
      
         
              
                                    
                
        
                
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit is new, it will return
     * an empty collection; or if this Hit has previously
     * been saved, it will retrieve related PcrProductsRelatedByRightHitId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Hit.
     */
    protected List getPcrProductsRelatedByRightHitIdJoinHitRelatedByLeftHitId(Criteria criteria)
        throws TorqueException
    {
        if (collPcrProductsRelatedByRightHitId == null)
        {
            if (isNew())
            {
               collPcrProductsRelatedByRightHitId = new ArrayList();
            }
            else
            {
                   criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId());
                   collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelectJoinHitRelatedByLeftHitId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(PcrProductPeer.RIGHT_HIT_ID, getHitId());
               if (!lastPcrProductsRelatedByRightHitIdCriteria.equals(criteria))
            {
                collPcrProductsRelatedByRightHitId = PcrProductPeer.doSelectJoinHitRelatedByLeftHitId(criteria);
            }
        }
        lastPcrProductsRelatedByRightHitIdCriteria = criteria;

        return collPcrProductsRelatedByRightHitId;
    }
   
      
         
              
                                    
                
        
                        
      



             
      
    /**
     * Collection to store aggregation of collProjectHits
     */
    protected List collProjectHits;

    /**
     * Temporary storage of collProjectHits to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProjectHits()
    {
        if (collProjectHits == null)
        {
            collProjectHits = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProjectHit object to this object
     * through the ProjectHit foreign key attribute
     *
     * @param l ProjectHit
     * @throws TorqueException
     */
    public void addProjectHit(ProjectHit l) throws TorqueException
    {
        getProjectHits().add(l);
        l.setHit((Hit) this);
    }

    /**
     * The criteria used to select the current contents of collProjectHits
     */
    private Criteria lastProjectHitsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectHits(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProjectHits() throws TorqueException
    {
        if (collProjectHits == null)
        {
            collProjectHits = getProjectHits(new Criteria(10));
        }
        return collProjectHits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related ProjectHits from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProjectHits(Criteria criteria) throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId() );
                   collProjectHits = ProjectHitPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId());
                   if (!lastProjectHitsCriteria.equals(criteria))
                {
                    collProjectHits = ProjectHitPeer.doSelect(criteria);
                }
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProjectHits(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectHits(Connection con) throws TorqueException
    {
        if (collProjectHits == null)
        {
            collProjectHits = getProjectHits(new Criteria(10), con);
        }
        return collProjectHits;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit has previously
     * been saved, it will retrieve related ProjectHits from storage.
     * If this Hit is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProjectHits(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                     criteria.add(ProjectHitPeer.HIT_ID, getHitId());
                     collProjectHits = ProjectHitPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(ProjectHitPeer.HIT_ID, getHitId());
                     if (!lastProjectHitsCriteria.equals(criteria))
                 {
                     collProjectHits = ProjectHitPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProjectHitsCriteria = criteria;

         return collProjectHits;
     }

    

     
      
      
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit is new, it will return
     * an empty collection; or if this Hit has previously
     * been saved, it will retrieve related ProjectHits from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Hit.
     */
    protected List getProjectHitsJoinProject(Criteria criteria)
        throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId());
                   collProjectHits = ProjectHitPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId());
               if (!lastProjectHitsCriteria.equals(criteria))
            {
                collProjectHits = ProjectHitPeer.doSelectJoinProject(criteria);
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }
   
      
         
          
                            
                
        
        
   
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Hit is new, it will return
     * an empty collection; or if this Hit has previously
     * been saved, it will retrieve related ProjectHits from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Hit.
     */
    protected List getProjectHitsJoinHit(Criteria criteria)
        throws TorqueException
    {
        if (collProjectHits == null)
        {
            if (isNew())
            {
               collProjectHits = new ArrayList();
            }
            else
            {
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId());
                   collProjectHits = ProjectHitPeer.doSelectJoinHit(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                   criteria.add(ProjectHitPeer.HIT_ID, getHitId());
               if (!lastProjectHitsCriteria.equals(criteria))
            {
                collProjectHits = ProjectHitPeer.doSelectJoinHit(criteria);
            }
        }
        lastProjectHitsCriteria = criteria;

        return collProjectHits;
    }
     



     
    
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
      if (fieldNames == null)
      {
        fieldNames = new ArrayList();
            fieldNames.add("HitId");
            fieldNames.add("PrimerId");
            fieldNames.add("Usa");
            fieldNames.add("Position");
            fieldNames.add("Length");
            fieldNames.add("Strand");
            fieldNames.add("Mismatches");
            fieldNames.add("Creator");
            fieldNames = Collections.unmodifiableList(fieldNames);
      }
      return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
            if (name.equals("HitId"))
    {
              return new Integer(getHitId());
          }
            if (name.equals("PrimerId"))
    {
              return new Integer(getPrimerId());
          }
            if (name.equals("Usa"))
    {
              return getUsa();
          }
            if (name.equals("Position"))
    {
              return new Integer(getPosition());
          }
            if (name.equals("Length"))
    {
              return new Integer(getLength());
          }
            if (name.equals("Strand"))
    {
              return new Boolean(getStrand());
          }
            if (name.equals("Mismatches"))
    {
              return new Integer(getMismatches());
          }
            if (name.equals("Creator"))
    {
              return getCreator();
          }
            return null;
    }
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
            if (name.equals(HitPeer.HIT_ID))
        {
              return new Integer(getHitId());
          }
            if (name.equals(HitPeer.PRIMER_ID))
        {
              return new Integer(getPrimerId());
          }
            if (name.equals(HitPeer.USA))
        {
              return getUsa();
          }
            if (name.equals(HitPeer.POSITION))
        {
              return new Integer(getPosition());
          }
            if (name.equals(HitPeer.LENGTH))
        {
              return new Integer(getLength());
          }
            if (name.equals(HitPeer.STRAND))
        {
              return new Boolean(getStrand());
          }
            if (name.equals(HitPeer.MISMATCHES))
        {
              return new Integer(getMismatches());
          }
            if (name.equals(HitPeer.CREATOR))
        {
              return getCreator();
          }
            return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
    {
              return new Integer(getHitId());
          }
            if (pos == 1)
    {
              return new Integer(getPrimerId());
          }
            if (pos == 2)
    {
              return getUsa();
          }
            if (pos == 3)
    {
              return new Integer(getPosition());
          }
            if (pos == 4)
    {
              return new Integer(getLength());
          }
            if (pos == 5)
    {
              return new Boolean(getStrand());
          }
            if (pos == 6)
    {
              return new Integer(getMismatches());
          }
            if (pos == 7)
    {
              return getCreator();
          }
                return null;
    }

     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(HitPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                HitPeer.doInsert((Hit) this, con);
                setNew(false);
            }
            else
            {
                HitPeer.doUpdate((Hit) this, con);
            }
        }

                                                
                
          if (collPcrProductsRelatedByLeftHitId != null)
          {
              for (int i = 0; i < collPcrProductsRelatedByLeftHitId.size(); i++)
              {
                  ((PcrProduct) collPcrProductsRelatedByLeftHitId.get(i)).save(con);
              }
          }
                                                    
                
          if (collPcrProductsRelatedByRightHitId != null)
          {
              for (int i = 0; i < collPcrProductsRelatedByRightHitId.size(); i++)
              {
                  ((PcrProduct) collPcrProductsRelatedByRightHitId.get(i)).save(con);
              }
          }
                                        
                
          if (collProjectHits != null)
          {
              for (int i = 0; i < collProjectHits.size(); i++)
              {
                  ((ProjectHit) collProjectHits.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  hit_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setHitId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setHitId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getHitId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Hit copy() throws TorqueException
    {
        return copyInto(new Hit());
    }

    protected Hit copyInto(Hit copyObj) throws TorqueException
    {
        copyObj.setHitId(hit_id);
        copyObj.setPrimerId(primer_id);
        copyObj.setUsa(usa);
        copyObj.setPosition(position);
        copyObj.setLength(length);
        copyObj.setStrand(strand);
        copyObj.setMismatches(mismatches);
        copyObj.setCreator(creator);

                      copyObj.setHitId(0);
                                        

                                              
                
        List v = getPcrProductsRelatedByLeftHitId();
        for (int i = 0; i < v.size(); i++)
        {
            PcrProduct obj = (PcrProduct) v.get(i);
            copyObj.addPcrProductRelatedByLeftHitId(obj.copy());
        }
                                                          
                
        v = getPcrProductsRelatedByRightHitId();
        for (int i = 0; i < v.size(); i++)
        {
            PcrProduct obj = (PcrProduct) v.get(i);
            copyObj.addPcrProductRelatedByRightHitId(obj.copy());
        }
                                              
                
        v = getProjectHits();
        for (int i = 0; i < v.size(); i++)
        {
            ProjectHit obj = (ProjectHit) v.get(i);
            copyObj.addProjectHit(obj.copy());
        }
              
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public HitPeer getPeer()
    {
        return peer;
    }
}

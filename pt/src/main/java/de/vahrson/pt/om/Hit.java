package de.vahrson.pt.om;

import org.apache.torque.om.Persistent;

import de.vahrson.util.AbstractFilter;

/**
 * The skeleton for this class was autogenerated by Torque on:
 * 
 * [Thu Feb 10 11:33:28 CET 2005]
 * 
 * You should add additional methods to this class to meet the application
 * requirements. This class will only be generated as long as it does not
 * already exist in the output directory.
 * 
 * Definition of Hit positions
 * <ul>
 * 	<li>Hit positions always refer to direct strand of the underlying sequence
 * 	<li>It follows, that always: position <= endPosition
 * </ul>
 * Consider this example: 
 <pre>
      ---------- h1
  =========================================
                      ---------- h2
  12345678901234567890123456789012345678901
  1        11        21        31        41
 </pre>
 * h1 is a hit on the direct strand with position=5, length=10, endPosition=14, strand=true<br>
 * h2 is a hit on the indirect strand with position=21, length=10, endPosition=30, strand=false 
 *
 * This is the same convention eprimer3 uses to mark hits:
<pre> 
1 PRODUCT SIZE: 100
     FORWARD PRIMER    1765   20  59.81  55.00  CCGGTACCCTTAGATGTGGA

     REVERSE PRIMER    1845   20  60.16  55.00  GGTGTGACAGGATGCTTGTG
</pre
 **/
public class Hit extends de.vahrson.pt.om.BaseHit implements Persistent {
    /**
     * For clarity: strand == true means direct strand
     * 
     * @return
     */
    public boolean isDirectStrand() {
        return getStrand();
    }
    
    /** 
     * 
     * @author wova
     *
     * TODO To change the template for this generated type comment go to
     * Window - Preferences - Java - Code Style - Code Templates
     */
    public int getEndPosition() {
        return getPosition() + getLength() -1;
    }

    /**
     * Compare hits to reference hit, accept if they are on the same usa, same
     * position same strand, same len same #mismatches
     * 
     * @author wova
     * 
     * TODO To change the template for this generated type comment go to Window -
     * Preferences - Java - Code Style - Code Templates
     */
    public static class HitEqualFilter extends AbstractFilter {
        private Hit fHit;
        private boolean fInvert = false;
        
        public HitEqualFilter(Hit h) {
            fHit=h;
        }
        
        public boolean accept(Object r) {
            Hit h = (Hit) r;
            return (fHit.getPosition() == h.getPosition()
                    && fHit.getStrand() == h.getStrand()
                    && fHit.getUsa().equalsIgnoreCase(h.getUsa())
                    && fHit.getLength() == h.getLength() 
                    && fHit.getMismatches() == h.getMismatches())
                    ^ fInvert;
        }
        public boolean isInvert() {
            return fInvert;
        }
        public void setInvert(boolean invert) {
            fInvert = invert;
        }
    }
}
